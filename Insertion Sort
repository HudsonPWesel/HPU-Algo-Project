//Time complexity: O(n^2) is worst case 
// Best Case: O(n) 
#include <iostream>
#include <vector>

using namespace std;

void insertionSort(vector<int>& arr, int& comparisons) {
    int n = arr.size();
    for (int i = 2; i < n; i++) { // modified to start from index 2
        int x = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > x) {
            arr[j + 1] = arr[j];
            j--;
            comparisons++; // Increment comparison counter
        }
        arr[j + 1] = x;
    }
}

int main() {
    vector<int> arr = {12, 11, 13, 5, 6};
    int comparisons = 0;

    cout << "Orginal  array is: ";
    for (int i = 0; i < arr.size(); i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    insertionSort(arr, comparisons);

    cout << "Sorted array is: ";
    for (int i = 0; i < arr.size(); i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    cout << "Number of comparisons: " << comparisons << endl;

    return 0;
}

